{"version":3,"file":"static/js/1308.7c16f374.chunk.js","mappings":"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","sources":["components/Pagination.tsx","components/Table.tsx","pages/apps/Ecommerce/Customers.tsx","../node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\ninterface PaginationProps {\n  tableProps: any;\n  sizePerPageList: {\n    text: string;\n    value: number;\n  }[];\n}\n\nconst Pagination = ({ tableProps, sizePerPageList }: PaginationProps) => {\n  /**\n   * pagination count , index\n   */\n  const [pageCount, setPageCount] = useState<number>(tableProps.pageCount);\n  const [pageIndex, setPageIndex] = useState<number>(\n    tableProps.state.pageIndex\n  );\n\n  useEffect(() => {\n    setPageCount(tableProps.pageCount);\n    setPageIndex(tableProps.state.pageIndex);\n  }, [tableProps.pageCount, tableProps.state.pageIndex]);\n\n  /**\n   * get filter pages\n   */\n  const filterPages = useCallback(\n    (visiblePages: any, totalPages: number) => {\n      return visiblePages.filter((page: any) => page <= pageCount);\n    },\n    [pageCount]\n  );\n\n  /**\n   * handle visible pages\n   */\n  const getVisiblePages = useCallback(\n    (page: number | null, total: number) => {\n      if (total < 7) {\n        return filterPages([1, 2, 3, 4, 5, 6], total);\n      } else {\n        if (page! % 5 >= 0 && page! > 4 && page! + 2 < total) {\n          return [1, page! - 1, page!, page! + 1, total];\n        } else if (page! % 5 >= 0 && page! > 4 && page! + 2 >= total) {\n          return [1, total - 3, total - 2, total - 1, total];\n        } else {\n          return [1, 2, 3, 4, 5, total];\n        }\n      }\n    },\n    [filterPages]\n  );\n\n  /**\n   * handle page change\n   * @param page - current page\n   * @returns\n   */\n  const changePage = (page: number) => {\n    const activePage = pageIndex + 1;\n\n    if (page === activePage) {\n      return;\n    }\n\n    const visiblePages = getVisiblePages(page, pageCount);\n    setVisiblePages(filterPages(visiblePages, pageCount));\n\n    tableProps.gotoPage(page - 1);\n  };\n\n  useEffect(() => {\n    const visiblePages = getVisiblePages(null, pageCount);\n    setVisiblePages(visiblePages);\n  }, [pageCount, getVisiblePages]);\n\n  const [visiblePages, setVisiblePages] = useState<number[]>(\n    getVisiblePages(null, pageCount)\n  );\n  const activePage: number = pageIndex + 1;\n\n  return (\n    <>\n      <div className=\"d-lg-flex align-items-center text-center pb-1\">\n        {sizePerPageList.length > 0 && (\n          <div className=\"d-inline-block me-3\">\n            <label className=\"me-1\">Display :</label>\n            <select\n              value={tableProps.state.pageSize}\n              onChange={(e: any) => {\n                tableProps.setPageSize(Number(e.target.value));\n              }}\n              className=\"form-select d-inline-block w-auto\"\n            >\n              {(sizePerPageList || []).map((pageSize, index) => {\n                return (\n                  <option key={index} value={pageSize.value}>\n                    {pageSize.text}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n        )}\n\n        <span className=\"me-3\">\n          Page{\" \"}\n          <strong>\n            {pageIndex + 1} of {tableProps.pageOptions.length}\n          </strong>{\" \"}\n        </span>\n\n        <span className=\"d-inline-block align-items-center text-sm-start text-center my-sm-0 my-2\">\n          <label className=\"form-label\">Go to page : </label>\n          <input\n            type=\"number\"\n            value={pageIndex + 1}\n            min=\"1\"\n            onChange={(e: any) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              tableProps.gotoPage(page);\n              setPageIndex(tableProps.state.pageIndex);\n            }}\n            className=\"form-control w-25 ms-1 d-inline-block\"\n          />\n        </span>\n\n        <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0\">\n          <li\n            key=\"prevpage\"\n            className={classNames(\"page-item\", \"paginate_button\", \"previous\", {\n              disabled: activePage === 1,\n            })}\n            onClick={() => {\n              if (activePage === 1) return;\n              changePage(activePage - 1);\n            }}\n          >\n            <Link to=\"#\" className=\"page-link\">\n              <i className=\"mdi mdi-chevron-left\"></i>\n            </Link>\n          </li>\n          {(visiblePages || []).map((page, index, array) => {\n            return array[index - 1] + 1 < page ? (\n              <React.Fragment key={page}>\n                <li className=\"page-item disabled d-none d-xl-inline-block\">\n                  <Link to=\"#\" className=\"page-link\">\n                    ...\n                  </Link>\n                </li>\n                <li\n                  className={classNames(\n                    \"page-item\",\n                    \"d-none\",\n                    \"d-xl-inline-block\",\n                    {\n                      active: activePage === page,\n                    }\n                  )}\n                  onClick={(e: any) => changePage(page)}\n                >\n                  <Link to=\"#\" className=\"page-link\">\n                    {page}\n                  </Link>\n                </li>\n              </React.Fragment>\n            ) : (\n              <li\n                key={page}\n                className={classNames(\n                  \"page-item\",\n                  \"d-none\",\n                  \"d-xl-inline-block\",\n                  {\n                    active: activePage === page,\n                  }\n                )}\n                onClick={(e: any) => changePage(page)}\n              >\n                <Link to=\"#\" className=\"page-link\">\n                  {page}\n                </Link>\n              </li>\n            );\n          })}\n          <li\n            key=\"nextpage\"\n            className={classNames(\"page-item\", \"paginate_button\", \"next\", {\n              disabled: activePage === tableProps.pageCount,\n            })}\n            onClick={() => {\n              if (activePage === tableProps.pageCount) return;\n              changePage(activePage + 1);\n            }}\n          >\n            <Link to=\"#\" className=\"page-link\">\n              <i className=\"mdi mdi-chevron-right\"></i>\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default Pagination;\n","import React, { useRef, useEffect, forwardRef, useState } from \"react\";\nimport {\n  useTable,\n  useSortBy,\n  usePagination,\n  useRowSelect,\n  useGlobalFilter,\n  useAsyncDebounce,\n  useExpanded,\n} from \"react-table\";\nimport classNames from \"classnames\";\n\n// components\nimport Pagination from \"./Pagination\";\n\ninterface GlobalFilterProps {\n  preGlobalFilteredRows: any;\n  globalFilter: any;\n  setGlobalFilter: any;\n  searchBoxClass: any;\n}\n\n// Define a default UI for filtering\nconst GlobalFilter = ({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n  searchBoxClass,\n}: GlobalFilterProps) => {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = useState<any>(globalFilter);\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n\n  return (\n    <div className={classNames(searchBoxClass)}>\n      <span className=\"d-flex align-items-center\">\n        Search :{\" \"}\n        <input\n          type=\"search\"\n          value={value || \"\"}\n          onChange={(e: any) => {\n            setValue(e.target.value);\n            onChange(e.target.value);\n          }}\n          placeholder={`${count} records...`}\n          className=\"form-control w-auto ms-1\"\n        />\n      </span>\n    </div>\n  );\n};\n\ninterface IndeterminateCheckboxProps {\n  indeterminate: any;\n  children?: React.ReactNode;\n}\n\nconst IndeterminateCheckbox = forwardRef<\n  HTMLInputElement,\n  IndeterminateCheckboxProps\n>(({ indeterminate, ...rest }, ref) => {\n  const defaultRef = useRef();\n  const resolvedRef: any = ref || defaultRef;\n\n  useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n\n  return (\n    <>\n      <div className=\"form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input\"\n          ref={resolvedRef}\n          {...rest}\n        />\n        <label htmlFor=\"form-check-input\" className=\"form-check-label\"></label>\n      </div>\n    </>\n  );\n});\n\ninterface TableProps {\n  isSearchable?: boolean;\n  isSortable?: boolean;\n  pagination?: boolean;\n  isSelectable?: boolean;\n  isExpandable?: boolean;\n  sizePerPageList?: {\n    text: string;\n    value: number;\n  }[];\n  columns: {\n    Header: string;\n    accessor: string;\n    sort?: boolean;\n    Cell?: any;\n    className?: string;\n  }[];\n  data: any[];\n  pageSize?: any;\n  searchBoxClass?: string;\n  tableClass?: string;\n  theadClass?: string;\n}\n\nconst Table = (props: TableProps) => {\n  const isSearchable = props[\"isSearchable\"] || false;\n  const isSortable = props[\"isSortable\"] || false;\n  const pagination = props[\"pagination\"] || false;\n  const isSelectable = props[\"isSelectable\"] || false;\n  const isExpandable = props[\"isExpandable\"] || false;\n  const sizePerPageList = props[\"sizePerPageList\"] || [];\n\n  let otherProps: any = {};\n\n  if (isSearchable) {\n    otherProps[\"useGlobalFilter\"] = useGlobalFilter;\n  }\n  if (isSortable) {\n    otherProps[\"useSortBy\"] = useSortBy;\n  }\n  if (isExpandable) {\n    otherProps[\"useExpanded\"] = useExpanded;\n  }\n  if (pagination) {\n    otherProps[\"usePagination\"] = usePagination;\n  }\n  if (isSelectable) {\n    otherProps[\"useRowSelect\"] = useRowSelect;\n  }\n\n  const dataTable = useTable(\n    {\n      columns: props[\"columns\"],\n      data: props[\"data\"],\n      initialState: { pageSize: props[\"pageSize\"] || 10 },\n    },\n    otherProps.hasOwnProperty(\"useGlobalFilter\") &&\n      otherProps[\"useGlobalFilter\"],\n    otherProps.hasOwnProperty(\"useSortBy\") && otherProps[\"useSortBy\"],\n    otherProps.hasOwnProperty(\"useExpanded\") && otherProps[\"useExpanded\"],\n    otherProps.hasOwnProperty(\"usePagination\") && otherProps[\"usePagination\"],\n    otherProps.hasOwnProperty(\"useRowSelect\") && otherProps[\"useRowSelect\"],\n    (hooks) => {\n      isSelectable &&\n        hooks.visibleColumns.push((columns: any) => [\n          // Let's make a column for selection\n          {\n            id: \"selection\",\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: ({ getToggleAllPageRowsSelectedProps }: any) => (\n              <div>\n                <IndeterminateCheckbox\n                  {...getToggleAllPageRowsSelectedProps()}\n                />\n              </div>\n            ),\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }: any) => (\n              <div>\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n              </div>\n            ),\n          },\n          ...columns,\n        ]);\n\n      isExpandable &&\n        hooks.visibleColumns.push((columns: any) => [\n          // Let's make a column for selection\n          {\n            // Build our expander column\n            id: \"expander\", // Make sure it has an ID\n            Header: ({\n              getToggleAllRowsExpandedProps,\n              isAllRowsExpanded,\n            }: any) => (\n              <span {...getToggleAllRowsExpandedProps()}>\n                {isAllRowsExpanded ? \"-\" : \"+\"}\n              </span>\n            ),\n            Cell: ({ row }) =>\n              // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n              // to build the toggle for expanding a row\n              row.canExpand ? (\n                <span\n                  {...row.getToggleRowExpandedProps({\n                    style: {\n                      // We can even use the row.depth property\n                      // and paddingLeft to indicate the depth\n                      // of the row\n                      paddingLeft: `${row.depth * 2}rem`,\n                    },\n                  })}\n                >\n                  {row.isExpanded ? \"-\" : \"+\"}\n                </span>\n              ) : null,\n          },\n          ...columns,\n        ]);\n    }\n  );\n\n  let rows = pagination ? dataTable.page : dataTable.rows;\n\n  return (\n    <>\n      {isSearchable && (\n        <GlobalFilter\n          preGlobalFilteredRows={dataTable.preGlobalFilteredRows}\n          globalFilter={dataTable.state.globalFilter}\n          setGlobalFilter={dataTable.setGlobalFilter}\n          searchBoxClass={props[\"searchBoxClass\"]}\n        />\n      )}\n\n      <div className=\"table-responsive\">\n        <table\n          {...dataTable.getTableProps()}\n          className={classNames(\n            \"table table-centered react-table\",\n            props[\"tableClass\"]\n          )}\n        >\n          <thead className={props[\"theadClass\"]}>\n            {(dataTable.headerGroups || []).map((headerGroup: any) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {(headerGroup.headers || []).map((column: any) => (\n                  <th\n                    {...column.getHeaderProps(\n                      column.sort && column.getSortByToggleProps()\n                    )}\n                    className={classNames({\n                      sorting_desc: column.isSortedDesc === true,\n                      sorting_asc: column.isSortedDesc === false,\n                      sortable: column.sort === true,\n                    })}\n                  >\n                    {column.render(\"Header\")}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...dataTable.getTableBodyProps()}>\n            {(rows || []).map((row: any, i: number) => {\n              dataTable.prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {(row.cells || []).map((cell: any) => {\n                    return (\n                      <td\n                        {...cell.getCellProps([\n                          {\n                            className: cell.column.className,\n                          },\n                        ])}\n                      >\n                        {cell.render(\"Cell\")}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      {pagination && (\n        <Pagination tableProps={dataTable} sizePerPageList={sizePerPageList} />\n      )}\n    </>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Row, Col, Card, Button } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\n// components\nimport PageTitle from \"../../../components/PageTitle\";\nimport Table from \"../../../components/Table\";\n\n// dummy data\nimport { customers } from \"./data\";\n\n/* name column render */\nconst NameColumn = ({ row }: { row: any }) => {\n  return (\n    <div className=\"table-user\">\n      <img src={row.original.avatar} alt=\"\" className=\"me-2 rounded-circle\" />\n      <Link to=\"#\" className=\"text-body fw-semibold\">\n        {row.original.name}\n      </Link>\n    </div>\n  );\n};\n\n/* last order column render */\nconst LastOrderColumn = ({ row }: { row: any }) => {\n  return (\n    <>\n      {row.original.last_order.date}{\" \"}\n      <small className=\"text-muted\">{row.original.last_order.time}</small>\n    </>\n  );\n};\n\n/* status column render */\nconst StatusColumn = ({ row }: { row: any }) => {\n  return (\n    <React.Fragment>\n      <span\n        className={classNames(\"badge\", {\n          \"badge-soft-success\": row.original.status === \"Active\",\n          \"badge-soft-danger\": row.original.status === \"Blocked\",\n        })}\n      >\n        {row.original.status}\n      </span>\n    </React.Fragment>\n  );\n};\n\n/* action column render */\nconst ActionColumn = () => {\n  return (\n    <React.Fragment>\n      <Link to=\"#\" className=\"action-icon\">\n        {\" \"}\n        <i className=\"mdi mdi-eye\"></i>\n      </Link>\n      <Link to=\"#\" className=\"action-icon\">\n        {\" \"}\n        <i className=\"mdi mdi-square-edit-outline\"></i>\n      </Link>\n      <Link to=\"#\" className=\"action-icon\">\n        {\" \"}\n        <i className=\"mdi mdi-delete\"></i>\n      </Link>\n    </React.Fragment>\n  );\n};\n\n// columns to render\nconst columns = [\n  {\n    Header: \"Customer\",\n    accessor: \"name\",\n    sort: true,\n    Cell: NameColumn,\n    classes: \"table-user\",\n  },\n  {\n    Header: \"Phone\",\n    accessor: \"phone\",\n    sort: true,\n  },\n  {\n    Header: \"Balance\",\n    accessor: \"balance\",\n    sort: true,\n  },\n  {\n    Header: \"Orders\",\n    accessor: \"orders\",\n    sort: true,\n  },\n  {\n    Header: \"Last Order\",\n    accessor: \"last_order\",\n    sort: true,\n    Cell: LastOrderColumn,\n  },\n  {\n    Header: \"Status\",\n    accessor: \"status\",\n    sort: true,\n    Cell: StatusColumn,\n  },\n  {\n    Header: \"Action\",\n    accessor: \"action\",\n    sort: false,\n    Cell: ActionColumn,\n  },\n];\n\n// give page size\nconst sizePerPageList = [\n  {\n    text: \"10\",\n    value: 10,\n  },\n  {\n    text: \"25\",\n    value: 25,\n  },\n  {\n    text: \"All\",\n    value: customers.length,\n  },\n];\n\n// main component\nconst Customers = () => {\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Ecommerce\", path: \"/apps/ecommerce/customers\" },\n          {\n            label: \"Customers\",\n            path: \"/apps/ecommerce/customers\",\n            active: true,\n          },\n        ]}\n        title={\"Customers\"}\n      />\n\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <Row>\n                <Col sm={4}>\n                  <Button className=\"btn btn-danger mb-2\">\n                    <i className=\"mdi mdi-plus-circle me-2\"></i> Add Customer\n                  </Button>\n                </Col>\n\n                <Col sm={8}>\n                  <div className=\"text-sm-end\">\n                    <Button className=\"btn btn-success mb-2 me-1\">\n                      <i className=\"mdi mdi-cog-outline\"></i>\n                    </Button>\n\n                    <Button className=\"btn btn-light mb-2 me-1\">Import</Button>\n\n                    <Button className=\"btn btn-light mb-2\">Export</Button>\n                  </div>\n                </Col>\n              </Row>\n\n              <Table\n                columns={columns}\n                data={customers}\n                pageSize={10}\n                sizePerPageList={sizePerPageList}\n                isSortable={true}\n                pagination={true}\n                isSelectable={true}\n                isSearchable={true}\n                tableClass=\"table-striped dt-responsive nowrap w-100\"\n                searchBoxClass=\"my-2\"\n              />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default Customers;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...buttonProps,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;"],"names":["_ref","tableProps","sizePerPageList","pageCount","setPageCount","useState","pageIndex","setPageIndex","state","useEffect","filterPages","useCallback","visiblePages","totalPages","filter","page","getVisiblePages","total","changePage","setVisiblePages","gotoPage","activePage","_jsx","_Fragment","children","_jsxs","className","length","value","pageSize","onChange","e","setPageSize","Number","target","map","index","text","pageOptions","type","min","classNames","disabled","onClick","Link","to","array","React","active","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","searchBoxClass","count","setValue","useAsyncDebounce","undefined","placeholder","IndeterminateCheckbox","forwardRef","_ref2","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","current","htmlFor","props","isSearchable","isSortable","pagination","isSelectable","isExpandable","otherProps","useGlobalFilter","useSortBy","useExpanded","usePagination","useRowSelect","dataTable","useTable","columns","data","initialState","hasOwnProperty","hooks","visibleColumns","push","id","Header","_ref3","getToggleAllPageRowsSelectedProps","Cell","_ref4","row","getToggleRowSelectedProps","_ref5","getToggleAllRowsExpandedProps","isAllRowsExpanded","_ref6","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","rows","getTableProps","headerGroups","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","sort","getSortByToggleProps","sorting_desc","isSortedDesc","sorting_asc","sortable","render","getTableBodyProps","i","prepareRow","getRowProps","cells","cell","getCellProps","Pagination","accessor","src","original","avatar","alt","name","classes","last_order","date","time","status","ActionColumn","customers","Customers","PageTitle","breadCrumbItems","label","path","title","Row","Col","Card","sm","Button","Table","tableClass","as","bsPrefix","variant","size","prefix","useBootstrapPrefix","buttonProps","tagName","useButtonProps","Component","href","displayName","defaultProps"],"sourceRoot":""}