{"version":3,"file":"static/js/2065.3c2d579a.chunk.js","mappings":"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","sources":["components/PageTitle.tsx","pages/uikit/Notifications.tsx"],"sourcesContent":["import React from \"react\";\nimport { Row, Col, Breadcrumb } from \"react-bootstrap\";\n\ninterface BreadcrumbItems {\n  label: string;\n  path: string;\n  active?: boolean;\n}\n\ninterface PageTitleProps {\n  breadCrumbItems: Array<BreadcrumbItems>;\n  title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n  return (\n    <Row>\n      <Col>\n        <div className=\"page-title-box\">\n          <div className=\"page-title-right\">\n            <Breadcrumb className=\"m-0\">\n              <Breadcrumb.Item href=\"/\">Keja Plus</Breadcrumb.Item>\n\n              {(props[\"breadCrumbItems\"] || []).map((item, index) => {\n                return item.active ? (\n                  <Breadcrumb.Item active key={index}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                ) : (\n                  <Breadcrumb.Item key={index} href={item.path}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                );\n              })}\n            </Breadcrumb>\n          </div>\n          <h4 className=\"page-title\">{props[\"title\"]}</h4>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PageTitle;\n","import React, { useState } from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  Toast,\n  ToastContainer,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\n\nimport logo from \"../../assets/images/logo-sm.png\";\n\nconst colors: string[] = [\n  \"primary\",\n  \"secondary\",\n  \"success\",\n  \"danger\",\n  \"warning\",\n  \"info\",\n  \"light\",\n  \"dark\",\n];\n\nconst DefaultToasts = () => {\n  const [show, setShow] = useState<boolean>(true);\n  const [showTranslucent, setShowTranslucent] = useState<boolean>(true);\n  const [showPlacement, setShowPlacement] = useState<boolean>(true);\n\n  const [stacked, setStacked] = useState([\n    {\n      time: \"just now\",\n      desc: \"See? Just like this.\",\n    },\n    {\n      time: \"2 seconds ago\",\n      desc: \"Heads up, toasts will stack automatically\",\n    },\n  ]);\n\n  /*\n   * handle close\n   */\n  const handleClose = (index: number) => {\n    const list = [...stacked];\n    list.splice(index, 1);\n    setStacked(list);\n  };\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title\">Bootstrap Toasts</h4>\n        <p className=\"text-muted font-14\">\n          Push notifications to your visitors with a toast, a lightweight and\n          easily customizable alert message.\n        </p>\n\n        <Row>\n          <Col lg={6}>\n            <h5 className=\"mb-2\">Basic</h5>\n            <p className=\"text-muted font-14\">\n              Toasts are as flexible as you need and have very little required\n              markup. At a minimum, we require a single element to contain your\n              “toasted” content and strongly encourage a dismiss button.\n            </p>\n            <div className=\"p-3\">\n              <Toast\n                onClose={() => setShow(false)}\n                show={show}\n                delay={3000}\n                autohide\n              >\n                <Toast.Header>\n                  <img\n                    src={logo}\n                    alt=\"brand-logo\"\n                    height=\"12\"\n                    className=\"me-1\"\n                  />\n                  <strong className=\"me-auto\">UBold</strong>\n                  <small className=\"ms-5\">11 mins ago</small>\n                </Toast.Header>\n                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n              </Toast>\n            </div>\n          </Col>\n\n          <Col lg={6}>\n            <h5 className=\"mb-2\">Translucent</h5>\n            <p className=\"text-muted font-14\">\n              Toasts are slightly translucent, too, so they blend over whatever\n              they might appear over. For browsers that support the\n              backdrop-filter CSS property, we’ll also attempt to blur the\n              elements under a toast.\n            </p>\n\n            <div className=\"p-3 bg-light\">\n              <Toast\n                onClose={() => setShowTranslucent(false)}\n                show={showTranslucent}\n                delay={4000}\n                autohide\n              >\n                <Toast.Header>\n                  <img\n                    src={logo}\n                    alt=\"brand-logo\"\n                    height=\"12\"\n                    className=\"me-1\"\n                  />\n                  <strong className=\"me-auto\">UBold</strong>\n                  <small className=\"ms-5\">11 mins ago</small>\n                </Toast.Header>\n                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n              </Toast>\n            </div>\n          </Col>\n        </Row>\n\n        {/* stacked */}\n        <Row>\n          <Col lg={6} className=\"mt-4\">\n            <h5 className=\"mb-2\">Stacking</h5>\n            <p className=\"text-muted font-14\">\n              When you have multiple toasts, we default to vertiaclly stacking\n              them in a readable manner.\n            </p>\n            <div className=\"p-3\">\n              <div\n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n                style={{ position: \"relative\", minHeight: \"200px\" }}\n              >\n                <div\n                  className=\"toast-container\"\n                  style={{ position: \"absolute\", top: 0, right: 0 }}\n                >\n                  {(stacked || []).map((item, index) => {\n                    return (\n                      <Toast\n                        key={index}\n                        onClose={() => handleClose(index)}\n                        delay={5000}\n                        autohide\n                      >\n                        <Toast.Header>\n                          <img\n                            src={logo}\n                            alt=\"brand-logo\"\n                            height=\"12\"\n                            className=\"me-1\"\n                          />\n                          <strong className=\"me-auto\">UBold</strong>\n                          <small className=\"ms-5\">{item.time}</small>\n                        </Toast.Header>\n                        <Toast.Body>{item.desc}</Toast.Body>\n                      </Toast>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </Col>\n\n          <Col lg={6} className=\"mt-4\">\n            <h5 className=\"mb-2\">Placement</h5>\n            <p className=\"text-muted font-14\">\n              Place toasts with custom CSS as you need them. The top right is\n              often used for notifications, as is the top middle. If you’re only\n              ever going to show one toast at a time, put the positioning styles\n              right on the <code>.toast</code>.\n            </p>\n\n            <div className=\"p-3\">\n              <div\n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n                className=\"d-flex justify-content-center align-items-center\"\n                style={{ minHeight: \"200px\" }}\n              >\n                <Toast\n                  onClose={() => setShowPlacement(false)}\n                  show={showPlacement}\n                >\n                  <Toast.Header>\n                    <img\n                      src={logo}\n                      alt=\"brand-logo\"\n                      height=\"12\"\n                      className=\"me-1\"\n                    />\n                    <strong className=\"me-auto\">UBold</strong>\n                    <small className=\"ms-5\">1 mins ago</small>\n                  </Toast.Header>\n                  <Toast.Body>\n                    Heads up, toasts will stack automatically\n                  </Toast.Body>\n                </Toast>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst CustomToast = () => {\n  const [showCustom1, setShowCustom1] = useState<boolean>(true);\n  const [showCustom2, setShowCustom2] = useState<boolean>(true);\n  const [showCustom3, setShowCustom3] = useState<boolean>(true);\n  const [showCustom4, setShowCustom4] = useState<boolean>(true);\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"header-title\">Custom content</h4>\n          <p className=\"text-muted\">\n            Alternatively, you can also add additional controls and components\n            to toasts.\n          </p>\n          <Toast\n            className=\"d-flex align-items-center mt-4\"\n            show={showCustom1}\n            onClose={() => setShowCustom1(false)}\n            delay={3000}\n            autohide\n          >\n            <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n            <Button\n              variant=\"\"\n              onClick={() => setShowCustom1(false)}\n              className=\"btn-close ms-auto me-2\"\n            ></Button>\n          </Toast>\n          <Toast\n            className=\"d-flex align-items-center text-white bg-primary border-0 mt-4\"\n            show={showCustom2}\n            onClose={() => setShowCustom2(false)}\n            delay={4000}\n            autohide\n          >\n            <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n\n            <Button\n              variant=\"\"\n              onClick={() => setShowCustom2(false)}\n              className=\"btn-close btn-close-white ms-auto me-2\"\n            ></Button>\n          </Toast>\n          <Toast\n            className=\"mt-4\"\n            show={showCustom3}\n            onClose={() => setShowCustom3(false)}\n            delay={6000}\n            autohide\n          >\n            <Toast.Body>\n              Hello, world! This is a toast message.\n              <div className=\"mt-2 pt-2 border-top\">\n                <Button variant=\"primary\" className=\"btn-sm me-1\">\n                  Take action\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => setShowCustom3(false)}\n                  className=\"btn-sm\"\n                >\n                  Close\n                </Button>\n              </div>\n            </Toast.Body>\n          </Toast>\n          <Toast\n            className=\"text-white bg-primary mt-4\"\n            show={showCustom4}\n            onClose={() => setShowCustom4(false)}\n            delay={8000}\n            autohide\n          >\n            <Toast.Body>\n              Hello, world! This is a toast message.\n              <div className=\"mt-2 pt-2 border-top\">\n                <Button variant=\"light\" className=\"btn-sm me-1\">\n                  Take action\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => setShowCustom4(false)}\n                  className=\"btn-sm\"\n                >\n                  Close\n                </Button>\n              </div>\n            </Toast.Body>\n          </Toast>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst PlacementToast = () => {\n  type ToastPositions =\n    | \"top-start\"\n    | \"top-center\"\n    | \"top-end\"\n    | \"middle-start\"\n    | \"middle-center\"\n    | \"middle-end\"\n    | \"bottom-start\"\n    | \"bottom-center\"\n    | \"bottom-end\";\n\n  const [position, setPosition] = useState<ToastPositions>(\"top-start\");\n\n  const positions = [\n    \"top-start\",\n    \"top-center\",\n    \"top-end\",\n    \"middle-start\",\n    \"middle-center\",\n    \"middle-end\",\n    \"bottom-start\",\n    \"bottom-center\",\n    \"bottom-end\",\n  ];\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"header-title\">Placement</h4>\n          <p className=\"text-muted font-14\">\n            Place toasts with custom CSS as you need them. The top right is\n            often used for notifications, as is the top middle. If you’re only\n            ever going to show one toast at a time, put the positioning styles\n            right on the\n            <code>.toast</code>.\n          </p>\n          <div className=\"mb-3\">\n            <label htmlFor=\"selectToastPlacement\">Toast placement</label>\n            <Form.Select\n              id=\"selectToastPlacement\"\n              className=\"mt-2\"\n              onChange={(e: any) => setPosition(e.currentTarget.value)}\n            >\n              {(positions || []).map((p) => (\n                <option key={p} value={p}>\n                  {p}\n                </option>\n              ))}\n            </Form.Select>\n          </div>\n\n          <div\n            aria-live=\"polite\"\n            aria-atomic=\"true\"\n            className=\"bg-light position-relative\"\n            style={{ minHeight: \"294px\" }}\n          >\n            <ToastContainer className=\"p-3\" position={position}>\n              <Toast>\n                <Toast.Header closeButton={false}>\n                  <img src={logo} className=\"me-1\" alt=\"\" height=\"12\" />\n                  <strong className=\"me-auto\">UBold</strong>\n                  <small>11 mins ago</small>\n                </Toast.Header>\n                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n              </Toast>\n            </ToastContainer>\n          </div>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst DefaultAlerts = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title\">Default Alert</h4>\n        <p className=\"sub-header\">\n          Alerts are available for any length of text, as well as an optional\n          dismiss button. For proper styling, use one of the eight{\" \"}\n          <code>variant</code>s.\n        </p>\n\n        {(colors || []).map((color, index) => {\n          return (\n            <Alert variant={color} key={index}>\n              This is a <strong>{color}</strong> alert—check it out!\n            </Alert>\n          );\n        })}\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst DismissibleAlerts = () => {\n  const [colors, setColors] = useState<string[]>([\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"danger\",\n    \"warning\",\n    \"info\",\n    \"light\",\n    \"dark\",\n  ]);\n\n  /*\n   * handle close\n   */\n  const handleClose = (index: number) => {\n    const list = [...colors];\n    list.splice(index, 1);\n    setColors(list);\n  };\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title\">Dismissing Alerts</h4>\n        <p className=\"sub-header\">\n          Add the <code>dismissible</code> prop to add a functioning dismiss\n          button to the Alert.\n        </p>\n\n        {colors.map((color, index) => {\n          return (\n            <Alert\n              variant={color}\n              key={index}\n              onClose={() => handleClose(index)}\n              dismissible\n            >\n              <strong>{color} - </strong> A simple {color} alert—check it out!\n            </Alert>\n          );\n        })}\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst CustomBackgroundAlerts = () => {\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"header-title\">Custom Background Alert</h4>\n          <p className=\"sub-header\">\n            Use <code>.bg-*</code>,<code>.border-0</code> classes.\n          </p>\n\n          {(colors || []).map((color, index) => {\n            return (\n              <Alert\n                variant={color}\n                key={index}\n                className={classNames(\n                  \"bg-\" + color,\n                  \"border-0\",\n                  color === \"light\" ? \"text-dark\" : \"text-white\",\n                  color === \"dark\" ? \"text-light\" : \"text-white\"\n                )}\n              >\n                This is a <strong>{color}</strong> alert—check it out!\n              </Alert>\n            );\n          })}\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst DismissibleCustomBackgroundAlerts = () => {\n  const [colors, setColors] = useState<string[]>([\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"danger\",\n    \"warning\",\n    \"info\",\n    \"light\",\n    \"dark\",\n  ]);\n\n  /*\n   * handle close\n   */\n  const handleClose = (index: number) => {\n    const list = [...colors];\n    list.splice(index, 1);\n    setColors(list);\n  };\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title\">Dismissing Custom Background Alert</h4>\n        <p className=\"sub-header\">\n          Use <code>.bg-*</code>,<code>.border-0</code> classes.\n        </p>\n\n        {(colors || []).map((color, index) => {\n          return (\n            <Alert\n              variant={color}\n              key={index}\n              onClose={() => handleClose(index)}\n              className={classNames(\n                \"bg-\" + color,\n                \"border-0\",\n                color === \"light\" ? \"text-dark\" : \"text-white\",\n                color === \"dark\" ? \"text-light\" : \"text-white\"\n              )}\n              dismissible\n            >\n              <strong>{color} - </strong> A simple {color} alert—check it out!\n            </Alert>\n          );\n        })}\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst Notifications = () => {\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Base UI\", path: \"/ui/toasts\" },\n          {\n            label: \"Alerts & Notifications\",\n            path: \"/ui/notifications\",\n            active: true,\n          },\n        ]}\n        title={\"Alerts & Notifications\"}\n      />\n\n      {/* toasts */}\n      <Row>\n        <Col>\n          <DefaultToasts />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <CustomToast />\n        </Col>\n        <Col lg={6}>\n          <PlacementToast />\n        </Col>\n      </Row>\n\n      {/* alerts */}\n      <Row>\n        <Col lg={6}>\n          <DefaultAlerts />\n        </Col>\n\n        <Col lg={6}>\n          <DismissibleAlerts />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <CustomBackgroundAlerts />\n        </Col>\n\n        <Col lg={6}>\n          <DismissibleCustomBackgroundAlerts />\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default Notifications;\n"],"names":["props","_jsx","Row","children","Col","_jsxs","className","Breadcrumb","href","map","item","index","active","label","path","colors","DefaultToasts","show","setShow","useState","showTranslucent","setShowTranslucent","showPlacement","setShowPlacement","stacked","setStacked","time","desc","Card","lg","Toast","onClose","delay","autohide","src","logo","alt","height","style","position","minHeight","top","right","list","splice","handleClose","CustomToast","showCustom1","setShowCustom1","showCustom2","setShowCustom2","showCustom3","setShowCustom3","showCustom4","setShowCustom4","_Fragment","Button","variant","onClick","PlacementToast","setPosition","htmlFor","Form","id","onChange","e","currentTarget","value","p","ToastContainer","closeButton","DefaultAlerts","color","Alert","DismissibleAlerts","setColors","dismissible","CustomBackgroundAlerts","classNames","DismissibleCustomBackgroundAlerts","Notifications","React","PageTitle","breadCrumbItems","title"],"sourceRoot":""}