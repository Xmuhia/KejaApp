{"version":3,"file":"static/js/8846.c93c763d.chunk.js","mappings":"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","sources":["components/VerticalForm.tsx","components/FormInput.tsx","pages/apps/Chat/data.tsx","pages/apps/Chat/ChatUsers.tsx","pages/apps/Chat/ChatArea.tsx","pages/apps/Chat/index.tsx","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { useState, InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface PasswordInputProps {\n  name: string;\n  placeholder?: string;\n  refCallback?: any;\n  errors: FieldErrors;\n  control?: Control<any>;\n  register?: any;\n  className?: string;\n}\n\n/* Password Input */\nconst PasswordInput = ({\n  name,\n  placeholder,\n  refCallback,\n  errors,\n  control,\n  register,\n  className,\n}: PasswordInputProps) => {\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n\n  return (\n    <>\n      <InputGroup className=\"mb-0\">\n        <Form.Control\n          type={showPassword ? \"text\" : \"password\"}\n          placeholder={placeholder}\n          name={name}\n          id={name}\n          as=\"input\"\n          ref={(r: HTMLInputElement) => {\n            if (refCallback) refCallback(r);\n          }}\n          className={className}\n          isInvalid={errors && errors[name] ? true : false}\n          {...(register ? register(name) : {})}\n          autoComplete={name}\n        />\n        <div\n          className={classNames(\"input-group-text\", \"input-group-password\", {\n            \"show-password\": showPassword,\n          })}\n          data-password={showPassword ? \"true\" : \"false\"}\n        >\n          <span\n            className=\"password-eye\"\n            onClick={() => {\n              setShowPassword(!showPassword);\n            }}\n          ></span>\n        </div>\n      </InputGroup>\n    </>\n  );\n};\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  type?: string;\n  name: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  refCallback?: any;\n  children?: any;\n  rows?: string;\n}\n\nconst FormInput = ({\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  refCallback,\n  children,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"password\" ? (\n            <>\n              <Form.Group className={containerClass}>\n                {label ? (\n                  <>\n                    {\" \"}\n                    <Form.Label className={labelClassName}>\n                      {label}\n                    </Form.Label>{\" \"}\n                    {children}{\" \"}\n                  </>\n                ) : null}\n                <PasswordInput\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors!}\n                  register={register}\n                  className={className}\n                />\n\n                {errors && errors[name] ? (\n                  <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name][\"message\"]}\n                  </Form.Control.Feedback>\n                ) : null}\n              </Form.Group>\n            </>\n          ) : (\n            <>\n              {type === \"checkbox\" || type === \"radio\" ? (\n                <>\n                  <Form.Group className={containerClass}>\n                    <Form.Check\n                      type={type}\n                      label={label}\n                      name={name}\n                      id={name}\n                      ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                      }}\n                      className={className}\n                      isInvalid={errors && errors[name] ? true : false}\n                      {...(register ? register(name) : {})}\n                      {...otherProps}\n                    />\n\n                    {errors && errors[name] ? (\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors[name][\"message\"]}\n                      </Form.Control.Feedback>\n                    ) : null}\n                  </Form.Group>\n                </>\n              ) : (\n                <Form.Group className={containerClass}>\n                  {label ? (\n                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                  ) : null}\n\n                  <Form.Control\n                    type={type}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as={comp}\n                    ref={(r: HTMLInputElement) => {\n                      if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    rows={rows}\n                    {...otherProps}\n                    autoComplete={name}\n                  >\n                    {children ? children : null}\n                  </Form.Control>\n\n                  {errors && errors[name] ? (\n                    <Form.Control.Feedback type=\"invalid\">\n                      {errors[name][\"message\"]}\n                    </Form.Control.Feedback>\n                  ) : null}\n                </Form.Group>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","import avatar1 from \"../../../assets/images/users/user-1.jpg\";\nimport avatar2 from \"../../../assets/images/users/user-2.jpg\";\nimport avatar3 from \"../../../assets/images/users/user-3.jpg\";\nimport avatar4 from \"../../../assets/images/users/user-4.jpg\";\nimport avatar5 from \"../../../assets/images/users/user-5.jpg\";\nimport avatar6 from \"../../../assets/images/users/user-6.jpg\";\nimport avatar7 from \"../../../assets/images/users/user-7.jpg\";\nimport avatar8 from \"../../../assets/images/users/user-8.jpg\";\nimport avatar9 from \"../../../assets/images/users/user-9.jpg\";\n\nexport interface ChatUser {\n  id?: number;\n  name?: string;\n  avatar?: string;\n  lastMessage?: string;\n  totalUnread?: number;\n  lastMessageOn?: string;\n  email?: string;\n  phone?: string;\n  location?: string;\n  languages?: string;\n  groups: string;\n}\n\nexport interface ChatMessage {\n  id: number;\n  from: ChatUser;\n  to: ChatUser;\n  message: {\n    type: string;\n    value: any;\n  };\n  sendOn?: string;\n}\n\nconst users: ChatUser[] = [\n  {\n    id: 1,\n    name: \"Brandon Smith\",\n    avatar: avatar2,\n    lastMessage: \"How are you today?\",\n    totalUnread: 3,\n    lastMessageOn: \"4:30am\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"California, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Favourties\",\n  },\n  {\n    id: 2,\n    name: \"Maria C\",\n    avatar: avatar5,\n    lastMessage: \"Hey! a reminder for tomorrow's meeting?\",\n    totalUnread: 0,\n    lastMessageOn: \"5:30am\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New York, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n  {\n    id: 3,\n    name: \"Dominic A\",\n    avatar: avatar4,\n    lastMessage: \"Are we going to have this week's planning meeting?\",\n    totalUnread: 2,\n    lastMessageOn: \"Thu\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New Jersey, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Favourties\",\n  },\n  {\n    id: 4,\n    name: \"Ronda D\",\n    avatar: avatar9,\n    lastMessage: \"Please check these design assets..\",\n    totalUnread: 0,\n    lastMessageOn: \"Wed\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"California, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n  {\n    id: 5,\n    name: \"Michael H\",\n    avatar: avatar6,\n    lastMessage: \"Are you free for 15 mins? I would like to discuss something\",\n    totalUnread: 6,\n    lastMessageOn: \"Tue\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New York, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n  {\n    id: 6,\n    name: \"Thomas R\",\n    avatar: avatar7,\n    lastMessage: \"Let's have meeting today between me, you and Tony...\",\n    totalUnread: 0,\n    lastMessageOn: \"Tue\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New Jersey, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n  {\n    id: 7,\n    name: \"Thomas J\",\n    avatar: avatar8,\n    lastMessage: \"Howdy?\",\n    totalUnread: 0,\n    lastMessageOn: \"Tue\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New York, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Favourties\",\n  },\n  {\n    id: 8,\n    name: \"Rikcy J\",\n    avatar: avatar3,\n    lastMessage: \"Are you interested in learning?\",\n    totalUnread: 28,\n    lastMessageOn: \"Mon\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New Jersey, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n];\n\nconst messages: ChatMessage[] = [];\n\nconst defaultTo = {\n  id: 9,\n  name: \"Geneva M\",\n  avatar: avatar1,\n  email: \"support@coderthemes.com\",\n  phone: \"+1 456 9595 9594\",\n  location: \"California, USA\",\n  languages: \"English, German, Spanish\",\n  groups: \"Work, Friends\",\n};\n\nfor (const user of users) {\n  messages.push(\n    {\n      id: 1,\n      message: {\n        type: \"text\",\n        value: \"Hello!\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:00\",\n    },\n    {\n      id: 2,\n      message: {\n        type: \"text\",\n        value: \"Hi, How are you? What about our next meeting?\",\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:01\",\n    },\n    {\n      id: 3,\n      message: {\n        type: \"text\",\n        value: \"Yeah everything is fine\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:01\",\n    },\n    {\n      id: 4,\n      message: {\n        type: \"text\",\n        value: \"Awesome!\",\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:02\",\n    },\n    {\n      id: 5,\n      message: {\n        type: \"text\",\n        value: \"Let's have it today if you are free\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:03\",\n    },\n    {\n      id: 6,\n      message: {\n        type: \"text\",\n        value: \"Sure thing! let me know if 2pm works for you\",\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:03\",\n    },\n    {\n      id: 7,\n      message: {\n        type: \"text\",\n        value:\n          \"Sorry, I have another meeting scheduled at 2pm. Can we have it at 3pm instead?\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:04\",\n    },\n    {\n      id: 8,\n      message: {\n        type: \"text\",\n        value:\n          \"We can also discuss about the presentation talk format if you have some extra mins\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:04\",\n    },\n    {\n      id: 9,\n      message: {\n        type: \"text\",\n        value:\n          \"3pm it is. Sure, let's discuss about presentation format, it would be great to finalize today. I am attaching the last year format and assets here..\",\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:05\",\n    },\n    {\n      id: 10,\n      message: {\n        type: \"file\",\n        value: {\n          file: \"UBold-sketch.zip\",\n          size: \"2.3MB\",\n        },\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:05\",\n    }\n  );\n}\n\nexport { users, messages };\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport classnames from \"classnames\";\nimport SimpleBar from \"simplebar-react\";\n\n// dummy data\nimport { users, ChatUser } from \"./data\";\n\nimport profilePic from \"../../../assets/images/users/user-1.jpg\";\n\ninterface ChatUsersProps {\n  onUserSelect: (value: ChatUser) => void;\n}\n\n// ChatUsers\nconst ChatUsers = ({ onUserSelect }: ChatUsersProps) => {\n  const [user, setUser] = useState<ChatUser[]>([...users]);\n  const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n  /**\n   * Search the user\n   * @param {*} text\n   */\n  const search = (text: string) => {\n    setUser(\n      text\n        ? [...users].filter(\n            (u) => u.name!.toLowerCase().indexOf(text.toLowerCase()) >= 0\n          )\n        : [...users]\n    );\n  };\n\n  /**\n   * Activates the user\n   * @param {*} user\n   */\n  const activateUser = (user: ChatUser) => {\n    setSelectedUser(user);\n    if (onUserSelect) {\n      onUserSelect(user);\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <div className=\"d-flex align-items-start mb-3\">\n            <img\n              src={profilePic}\n              className=\"me-2 rounded-circle\"\n              height=\"42\"\n              alt=\"\"\n            />\n            <div className=\"w-100\">\n              <h5 className=\"mt-0 mb-0 font-15\">\n                <Link to=\"#\" className=\"text-reset\">\n                  Geneva McKnight\n                </Link>\n              </h5>\n              <p className=\"mt-1 mb-0 text-muted font-14\">\n                <small className=\"mdi mdi-circle text-success\"></small> Online\n              </p>\n            </div>\n            <Link to=\"#\" className=\"text-reset font-20\">\n              <i className=\"mdi mdi-cog-outline\"></i>\n            </Link>\n          </div>\n\n          <form className=\"search-bar mb-3\">\n            <div className=\"position-relative\">\n              <input\n                type=\"text\"\n                className=\"form-control form-control-light\"\n                placeholder=\"People, groups & messages...\"\n                onKeyUp={(e: any) => search(e.target.value)}\n              />\n              <span className=\"mdi mdi-magnify\"></span>\n            </div>\n          </form>\n\n          <h6 className=\"font-13 text-muted text-uppercase\">Group Chats</h6>\n          <div className=\"p-2\">\n            <Link to=\"#\" className=\"text-reset mb-2 d-block\">\n              <i className=\"mdi mdi-checkbox-blank-circle-outline me-1 text-success\"></i>\n              <span className=\"mb-0 mt-1\">App Development</span>\n            </Link>\n\n            <Link to=\"#\" className=\"text-reset mb-2 d-block\">\n              <i className=\"mdi mdi-checkbox-blank-circle-outline me-1 text-warning\"></i>\n              <span className=\"mb-0 mt-1\">Office Work</span>\n            </Link>\n          </div>\n\n          <h6 className=\"font-13 text-muted text-uppercase\">Contacts</h6>\n          <Row>\n            <Col>\n              <SimpleBar style={{ height: \"375px\", width: \"100%\" }}>\n                {(user || []).map((user, index) => {\n                  return (\n                    <Link\n                      to=\"#\"\n                      key={index}\n                      className=\"text-body\"\n                      onClick={(e: any) => {\n                        activateUser(user);\n                      }}\n                    >\n                      <div\n                        className={classnames(\n                          \"d-flex\",\n                          \"align-items-start\",\n                          \"p-2\",\n                          {\n                            \"bg-light\": user.id === selectedUser.id,\n                          }\n                        )}\n                      >\n                        <img\n                          src={user.avatar}\n                          className=\"me-2 rounded-circle\"\n                          height=\"42\"\n                          alt=\"\"\n                        />\n\n                        <div className=\"w-100\">\n                          <h5 className=\"mt-0 mb-0 font-14\">\n                            <span className=\"float-end text-muted fw-normal font-12\">\n                              {user.lastMessageOn}\n                            </span>\n                            {user.name}\n                          </h5>\n                          <p className=\"mt-1 mb-0 text-muted font-14\">\n                            <span className=\"w-25 float-end text-end\">\n                              {user.totalUnread !== 0 && (\n                                <span className=\"badge badge-soft-danger\">\n                                  {user.totalUnread}\n                                </span>\n                              )}\n                            </span>\n                            <span className=\"w-75\">{user.lastMessage}</span>\n                          </p>\n                        </div>\n                      </div>\n                    </Link>\n                  );\n                })}\n              </SimpleBar>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nexport default ChatUsers;\n","import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Card,\n  Dropdown,\n  Row,\n  Col,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport classnames from \"classnames\";\nimport SimpleBar from \"simplebar-react\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\n// components\nimport { FormInput } from \"../../../components/\";\nimport Loader from \"../../../components/Loader\";\n\n// default data\nimport { messages, ChatMessage, ChatUser } from \"./data\";\n\nimport avatar1 from \"../../../assets/images/users/user-1.jpg\";\n\nconst UserMessage = ({\n  message,\n  toUser,\n}: {\n  message: ChatMessage;\n  toUser: ChatUser;\n}) => {\n  return (\n    <li className={classnames(\"clearfix\", { odd: message.from.id === toUser.id })} >\n      <div className=\"chat-avatar\">\n        <img src={message.from.avatar} className=\"rounded\" alt=\"\" />\n        <i>{message.sendOn}</i>\n      </div>\n\n      <div className=\"conversation-text\">\n        {message.message.type === \"text\" && (\n          <div className=\"ctext-wrap\">\n            <i>{message.from.name}</i>\n            {message.message.type === \"text\" && <p>{message.message.value}</p>}\n          </div>\n        )}\n        {message.message.type === \"file\" && (\n          <Card className=\"mt-2 mb-1 shadow-none border text-start\">\n            <div className=\"p-2\">\n              <Row className=\"align-items-center\">\n                <Col className=\"col-auto\">\n                  <div className=\"avatar-sm\">\n                    <span className=\"avatar-title bg-primary rounded\">\n                      .ZIP\n                    </span>\n                  </div>\n                </Col>\n                <Col className=\"ps-0\">\n                  <Link to=\"#\" className=\"text-muted fw-bold\">\n                    {message.message.value.file}\n                  </Link>\n                  <p className=\"mb-0\">{message.message.value.size}</p>\n                </Col>\n                <Col className=\"col-auto\">\n                  <Link to=\"#\" className=\"btn btn-link btn-lg text-muted\">\n                    <i className=\"dripicons-download\"></i>\n                  </Link>\n                </Col>\n              </Row>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      <Dropdown\n        className=\"conversation-actions\"\n        align={message.from.id === toUser.id ? \"start\" : \"end\"}\n      >\n        <Dropdown.Toggle as=\"a\" className=\"btn-sm card-drop cursor-pointer\">\n          <i className=\"mdi mdi-dots-vertical font-16\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item>Copy Message</Dropdown.Item>\n          <Dropdown.Item>Edit</Dropdown.Item>\n          <Dropdown.Item>Delete</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </li>\n  );\n};\n\ninterface ChatAreaProps {\n  selectedUser: ChatUser;\n}\n\n// ChatArea\nconst ChatArea = ({ selectedUser }: ChatAreaProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [userMessages, setUserMessages] = useState<ChatMessage[]>([]);\n\n  const [toUser] = useState<ChatUser>({\n    id: 9,\n    name: \"Geneva M\",\n    avatar: avatar1,\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"California, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  });\n\n  /*\n   *  Fetches the messages for selected user\n   */\n  const getMessagesForUser = useCallback(() => {\n    if (selectedUser) {\n      setLoading(true);\n      setTimeout(() => {\n        setUserMessages(\n          [...messages].filter(\n            (m) =>\n              (m.to.id === toUser.id && m.from.id === selectedUser.id) ||\n              (toUser.id === m.from.id && m.to.id === selectedUser.id)\n          )\n        );\n        setLoading(false);\n      }, 750);\n    }\n  }, [selectedUser, toUser]);\n\n  useEffect(() => {\n    getMessagesForUser();\n  }, [getMessagesForUser]);\n\n  /*\n   * form validation schema\n   */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      newMessage: yup.string().required(\"Please enter your messsage\"),\n    })\n  );\n\n  /*\n   * form methods\n   */\n  const methods = useForm({ resolver: schemaResolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n    reset,\n  } = methods;\n\n  /**\n   * sends the chat message\n   */\n  const sendChatMessage = async (values: { newMessage: string }) => {\n    let newUserMessages = [...userMessages];\n    newUserMessages.push({\n      id: userMessages.length + 1,\n      from: toUser,\n      to: selectedUser,\n      message: { type: \"text\", value: values[\"newMessage\"] },\n      sendOn: new Date().getHours() + \":\" + new Date().getMinutes(),\n    });\n    setTimeout(() => {\n      let otherNewMessages = [...newUserMessages]\n      otherNewMessages.push({\n        id: userMessages.length + 1,\n        from: selectedUser,\n        to: toUser,\n        message: { type: \"text\", value: values[\"newMessage\"] },\n        sendOn: new Date().getHours() + \":\" + new Date().getMinutes(),\n      })\n      setUserMessages(otherNewMessages);\n    }, 1000);\n    setUserMessages(newUserMessages);\n    reset();\n  };\n\n  const AlwaysScrollToBottom = () => {\n    const elementRef = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n      if (elementRef && elementRef.current && elementRef.current.scrollIntoView) {\n        elementRef.current.scrollIntoView({behavior:'smooth'})\n      }\n    })\n    return <div ref={elementRef} />\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body className=\"py-2 px-3 border-bottom border-light\">\n          <Row className=\"justify-content-between py-1\">\n            <Col sm={7}>\n              <div className=\"d-flex align-items-start\">\n                <img\n                  src={selectedUser.avatar}\n                  className=\"me-2 rounded-circle\"\n                  height=\"36\"\n                  alt=\"Brandon Smith\"\n                />\n                <div>\n                  <h5 className=\"mt-0 mb-0 font-15\">\n                    <Link to=\"/apps/contacts/profile\" className=\"text-reset\">\n                      {selectedUser.name}\n                    </Link>\n                  </h5>\n                  <p className=\"mt-1 mb-0 text-muted font-12\">\n                    <small className=\"mdi mdi-circle text-success\"></small>{\" \"}\n                    Online\n                  </p>\n                </div>\n              </div>\n            </Col>\n            <Col className=\"col-auto\">\n              <div id=\"tooltips-container\">\n                <OverlayTrigger\n                  placement=\"top\"\n                  overlay={<Tooltip id=\"\">Voice Call</Tooltip>}\n                >\n                  <Link\n                    to=\"#\"\n                    className=\"text-reset font-19 py-1 px-2 d-inline-block\"\n                  >\n                    <i className=\"fe-phone-call\"></i>\n                  </Link>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement=\"top\"\n                  overlay={<Tooltip id=\"\">Video Call</Tooltip>}\n                >\n                  <Link\n                    to=\"#\"\n                    className=\"text-reset font-19 py-1 px-2 d-inline-block\"\n                  >\n                    <i className=\"fe-video\"></i>\n                  </Link>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement=\"top\"\n                  overlay={<Tooltip id=\"\">Add Users</Tooltip>}\n                >\n                  <Link\n                    to=\"#\"\n                    className=\"text-reset font-19 py-1 px-2 d-inline-block\"\n                  >\n                    <i className=\"fe-user-plus\"></i>\n                  </Link>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement=\"top\"\n                  overlay={<Tooltip id=\"\">Delete Chat</Tooltip>}\n                >\n                  <Link\n                    to=\"#\"\n                    className=\"text-reset font-19 py-1 px-2 d-inline-block\"\n                  >\n                    <i className=\"fe-trash-2\"></i>\n                  </Link>\n                </OverlayTrigger>\n              </div>\n            </Col>\n          </Row>\n        </Card.Body>\n        <Card.Body>\n          {loading && <Loader />}\n\n          <SimpleBar\n            style={{ height: \"465px\", width: \"100%\" }}\n            id=\"chatScrollBar\"\n          >\n            <ul\n              className=\"conversation-list\"\n            >\n              {(userMessages || []).map((message, index) => {\n                return (\n                  <UserMessage key={index} message={message} toUser={toUser} />\n                );\n              })}\n              <AlwaysScrollToBottom />\n            </ul>\n          </SimpleBar>\n\n          <Row>\n            <Col>\n              <div className=\"mt-3 bg-light p-3 rounded\">\n                <form\n                  noValidate\n                  name=\"chat-form\"\n                  id=\"chat-form\"\n                  onSubmit={handleSubmit(sendChatMessage)}\n                >\n                  <div className=\"row\">\n                    <div className=\"col mb-2 mb-sm-0\">\n                      <FormInput\n                        type=\"text\"\n                        name=\"newMessage\"\n                        className=\"border-0\"\n                        placeholder=\"Enter your text\"\n                        register={register}\n                        key=\"newMessage\"\n                        errors={errors}\n                        control={control}\n                      />\n                    </div>\n                    <div className=\"col-sm-auto\">\n                      <div className=\"btn-group\">\n                        <Link to=\"#\" className=\"btn btn-light\">\n                          <i className=\"fe-paperclip\"></i>\n                        </Link>\n                        <button\n                          type=\"submit\"\n                          className=\"btn btn-success chat-send w-100\"\n                        >\n                          <i className=\"fe-send\"></i>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nexport default ChatArea;\n","import React, { useState } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\n\n// components\nimport PageTitle from \"../../../components/PageTitle\";\n\nimport ChatUsers from \"./ChatUsers\";\nimport ChatArea from \"./ChatArea\";\n// dummy data\nimport { users, ChatUser } from \"./data\";\n\n// ChatApp\nconst ChatApp = () => {\n  const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n  /**\n   * On user change\n   */\n  const onUserChange = (user: ChatUser) => {\n    setSelectedUser(user);\n  };\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Apps\", path: \"/apps/chat\" },\n          { label: \"Chat\", path: \"/apps/chat\", active: true },\n        ]}\n        title={\"Chat\"}\n      />\n\n      <Row>\n        <Col lg={4} xl={3}>\n          <ChatUsers onUserSelect={onUserChange} />\n        </Col>\n        <Col lg={8} xl={9}>\n          <ChatArea selectedUser={selectedUser} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default ChatApp;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","showPassword","setShowPassword","useState","_Fragment","_jsxs","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","rows","otherProps","comp","users","avatar","avatar2","lastMessage","totalUnread","lastMessageOn","email","phone","location","languages","groups","avatar5","avatar4","avatar6","avatar7","avatar8","avatar3","messages","defaultTo","avatar1","user","push","message","value","to","from","sendOn","file","size","onUserSelect","setUser","selectedUser","setSelectedUser","Card","src","profilePic","height","alt","Link","onKeyUp","e","search","text","target","filter","u","toLowerCase","indexOf","Row","Col","SimpleBar","style","width","index","activateUser","classnames","UserMessage","toUser","odd","Dropdown","align","loading","setLoading","userMessages","setUserMessages","getMessagesForUser","useCallback","setTimeout","m","useEffect","schemaResolver","yupResolver","yup","shape","newMessage","required","reset","AlwaysScrollToBottom","elementRef","useRef","current","scrollIntoView","behavior","sm","OverlayTrigger","placement","overlay","Tooltip","Loader","async","newUserMessages","length","values","Date","getHours","getMinutes","otherNewMessages","FormInput","ChatApp","PageTitle","breadCrumbItems","path","active","title","lg","xl","ChatUsers","ChatArea","CardImg","bsPrefix","variant","Component","prefix","useBootstrapPrefix","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Text","Header","Footer","ImgOverlay","p"],"sourceRoot":""}