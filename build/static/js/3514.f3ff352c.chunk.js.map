{"version":3,"file":"static/js/3514.f3ff352c.chunk.js","mappings":"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","sources":["components/VerticalForm.tsx","components/FormInput.tsx","pages/auth2/AuthLayout.tsx","pages/auth2/ForgetPassword2.tsx"],"sourcesContent":["import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { useState, InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface PasswordInputProps {\n  name: string;\n  placeholder?: string;\n  refCallback?: any;\n  errors: FieldErrors;\n  control?: Control<any>;\n  register?: any;\n  className?: string;\n}\n\n/* Password Input */\nconst PasswordInput = ({\n  name,\n  placeholder,\n  refCallback,\n  errors,\n  control,\n  register,\n  className,\n}: PasswordInputProps) => {\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n\n  return (\n    <>\n      <InputGroup className=\"mb-0\">\n        <Form.Control\n          type={showPassword ? \"text\" : \"password\"}\n          placeholder={placeholder}\n          name={name}\n          id={name}\n          as=\"input\"\n          ref={(r: HTMLInputElement) => {\n            if (refCallback) refCallback(r);\n          }}\n          className={className}\n          isInvalid={errors && errors[name] ? true : false}\n          {...(register ? register(name) : {})}\n          autoComplete={name}\n        />\n        <div\n          className={classNames(\"input-group-text\", \"input-group-password\", {\n            \"show-password\": showPassword,\n          })}\n          data-password={showPassword ? \"true\" : \"false\"}\n        >\n          <span\n            className=\"password-eye\"\n            onClick={() => {\n              setShowPassword(!showPassword);\n            }}\n          ></span>\n        </div>\n      </InputGroup>\n    </>\n  );\n};\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  type?: string;\n  name: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  refCallback?: any;\n  children?: any;\n  rows?: string;\n}\n\nconst FormInput = ({\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  refCallback,\n  children,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"password\" ? (\n            <>\n              <Form.Group className={containerClass}>\n                {label ? (\n                  <>\n                    {\" \"}\n                    <Form.Label className={labelClassName}>\n                      {label}\n                    </Form.Label>{\" \"}\n                    {children}{\" \"}\n                  </>\n                ) : null}\n                <PasswordInput\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors!}\n                  register={register}\n                  className={className}\n                />\n\n                {errors && errors[name] ? (\n                  <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name][\"message\"]}\n                  </Form.Control.Feedback>\n                ) : null}\n              </Form.Group>\n            </>\n          ) : (\n            <>\n              {type === \"checkbox\" || type === \"radio\" ? (\n                <>\n                  <Form.Group className={containerClass}>\n                    <Form.Check\n                      type={type}\n                      label={label}\n                      name={name}\n                      id={name}\n                      ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                      }}\n                      className={className}\n                      isInvalid={errors && errors[name] ? true : false}\n                      {...(register ? register(name) : {})}\n                      {...otherProps}\n                    />\n\n                    {errors && errors[name] ? (\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors[name][\"message\"]}\n                      </Form.Control.Feedback>\n                    ) : null}\n                  </Form.Group>\n                </>\n              ) : (\n                <Form.Group className={containerClass}>\n                  {label ? (\n                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                  ) : null}\n\n                  <Form.Control\n                    type={type}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as={comp}\n                    ref={(r: HTMLInputElement) => {\n                      if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    rows={rows}\n                    {...otherProps}\n                    autoComplete={name}\n                  >\n                    {children ? children : null}\n                  </Form.Control>\n\n                  {errors && errors[name] ? (\n                    <Form.Control.Feedback type=\"invalid\">\n                      {errors[name][\"message\"]}\n                    </Form.Control.Feedback>\n                  ) : null}\n                </Form.Group>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","import React, { useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nimport LogoDark from \"../../assets/images/logo-dark.png\";\nimport LogoLight from \"../../assets/images/logo-light.png\";\n\ninterface AccountLayoutProps {\n  helpText?: string;\n  bottomLinks?: any;\n  isCombineForm?: boolean;\n  children?: any;\n}\n\nconst AuthLayout = ({\n  helpText,\n  bottomLinks,\n  children,\n  isCombineForm,\n}: AccountLayoutProps) => {\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (document.body)\n      document.body.classList.remove(\n        \"authentication-bg\",\n        \"authentication-bg-pattern\"\n      );\n    if (document.body) document.body.classList.add(\"auth-fluid-pages\", \"pb-0\");\n\n    return () => {\n      if (document.body)\n        document.body.classList.remove(\"auth-fluid-pages\", \"pb-0\");\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"auth-fluid\">\n        {/* Auth fluid left content */}\n        <div className=\"auth-fluid-form-box\">\n          <div className=\"align-items-center d-flex h-100\">\n            <Card.Body>\n              {/* logo */}\n              <div className=\"auth-brand text-center text-lg-start\">\n                <div className=\"auth-logo\">\n                  <Link\n                    to=\"/\"\n                    className=\"logo logo-dark text-center outline-none\"\n                  >\n                    <span className=\"logo-lg\">\n                      <img src={LogoDark} alt=\"\" height=\"22\" />\n                    </span>\n                  </Link>\n\n                  <Link to=\"/\" className=\"logo logo-light text-center\">\n                    <span className=\"logo-lg\">\n                      <img src={LogoLight} alt=\"\" height=\"22\" />\n                    </span>\n                  </Link>\n                </div>\n              </div>\n\n              {children}\n\n              {/* footer links */}\n              {bottomLinks}\n            </Card.Body>\n          </div>\n        </div>\n\n        {/* Auth fluid right content */}\n        <div className=\"auth-fluid-right text-center\">\n          <div className=\"auth-user-testimonial\">\n            <h2 className=\"mb-3 text-white\">{t(\"I love the color!\")}</h2>\n            <p className=\"lead\">\n              <i className=\"mdi mdi-format-quote-open\"></i>{\" \"}\n              {t(\n                \"I've been using your theme from the previous developer for our web app, once I knew new version is out, I immediately bought with no hesitation. Great themes, good documentation with lots of customization available and sample app that really fit our need.\"\n              )}{\" \"}\n              <i className=\"mdi mdi-format-quote-close\"></i>\n            </p>\n            <h5 className=\"text-white\">\n              {t(\"- Fadlisaad (Ubold Admin User)\")}\n            </h5>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AuthLayout;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\n// actions\nimport { resetAuth, forgotPassword } from \"../../redux/actions\";\n\n// store\nimport { RootState, AppDispatch } from \"../../redux/store\";\n\n// components\nimport { VerticalForm, FormInput } from \"../../components\";\n\nimport AuthLayout from \"./AuthLayout\";\n\ninterface UserData {\n  username: string;\n}\n\n/* bottom links */\nconst BottomLink = () => {\n  const { t } = useTranslation();\n\n  return (\n    <footer className=\"footer footer-alt\">\n      <p className=\"text-muted\">\n        {t(\"Back to\")}{\" \"}\n        <Link to={\"/auth/login2\"} className=\"text-muted ms-1\">\n          <b>{t(\"Log in\")}</b>\n        </Link>\n      </p>\n    </footer>\n  );\n};\n\nconst ForgetPassword2 = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    dispatch(resetAuth());\n  }, [dispatch]);\n\n  const { loading, passwordReset, resetPasswordSuccess, error } = useSelector(\n    (state: RootState) => ({\n      loading: state.Auth.loading,\n      resetPasswordSuccess: state.Auth.resetPasswordSuccess,\n      error: state.Auth.error,\n      passwordReset: state.Auth.passwordReset,\n    })\n  );\n\n  /*\n   * form validation schema\n   */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      username: yup.string().required(t(\"Please enter Username\")),\n    })\n  );\n\n  /*\n   * handle form submission\n   */\n  const onSubmit = (formData: UserData) => {\n    dispatch(forgotPassword(formData[\"username\"]));\n  };\n\n  return (\n    <>\n      <AuthLayout bottomLinks={<BottomLink />}>\n        <h4 className=\"mt-0\">{t(\"Recover Password\")}</h4>\n        <p className=\"text-muted mb-4\">\n          {t(\n            \"Enter your email address and we'll send you an email with instructions to reset your password\"\n          )}\n        </p>\n\n        {resetPasswordSuccess && (\n          <Alert variant=\"success\">{resetPasswordSuccess.message}</Alert>\n        )}\n\n        {error && (\n          <Alert variant=\"danger\" className=\"my-2\">\n            {error}\n          </Alert>\n        )}\n\n        {!passwordReset && (\n          <VerticalForm onSubmit={onSubmit} resolver={schemaResolver}>\n            <FormInput\n              label={t(\"Username\")}\n              type=\"text\"\n              name=\"username\"\n              placeholder={t(\"Enter your Username\")}\n              containerClass={\"mb-3\"}\n            />\n\n            <div className=\"mb-0 text-center d-grid\">\n              <Button variant=\"primary\" type=\"submit\" disabled={loading}>\n                {t(\"Reset Password\")}\n              </Button>\n            </div>\n          </VerticalForm>\n        )}\n      </AuthLayout>\n    </>\n  );\n};\n\nexport default ForgetPassword2;\n"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","showPassword","setShowPassword","useState","_Fragment","_jsxs","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","rows","otherProps","comp","helpText","bottomLinks","isCombineForm","t","useTranslation","useEffect","document","body","classList","remove","add","Card","Link","to","src","LogoDark","alt","height","LogoLight","BottomLink","ForgetPassword2","dispatch","useDispatch","resetAuth","loading","passwordReset","resetPasswordSuccess","error","useSelector","state","Auth","schemaResolver","yupResolver","yup","shape","username","required","AuthLayout","Alert","variant","message","VerticalForm","formData","forgotPassword","FormInput","Button","disabled"],"sourceRoot":""}