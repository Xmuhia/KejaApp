{"version":3,"file":"static/js/7556.29860dc1.chunk.js","mappings":"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","sources":["components/VerticalForm.tsx","components/FormInput.tsx","pages/auth/AuthLayout.tsx","pages/auth/Login.tsx"],"sourcesContent":["import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { useState, InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface PasswordInputProps {\n  name: string;\n  placeholder?: string;\n  refCallback?: any;\n  errors: FieldErrors;\n  control?: Control<any>;\n  register?: any;\n  className?: string;\n}\n\n/* Password Input */\nconst PasswordInput = ({\n  name,\n  placeholder,\n  refCallback,\n  errors,\n  control,\n  register,\n  className,\n}: PasswordInputProps) => {\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n\n  return (\n    <>\n      <InputGroup className=\"mb-0\">\n        <Form.Control\n          type={showPassword ? \"text\" : \"password\"}\n          placeholder={placeholder}\n          name={name}\n          id={name}\n          as=\"input\"\n          ref={(r: HTMLInputElement) => {\n            if (refCallback) refCallback(r);\n          }}\n          className={className}\n          isInvalid={errors && errors[name] ? true : false}\n          {...(register ? register(name) : {})}\n          autoComplete={name}\n        />\n        <div\n          className={classNames(\"input-group-text\", \"input-group-password\", {\n            \"show-password\": showPassword,\n          })}\n          data-password={showPassword ? \"true\" : \"false\"}\n        >\n          <span\n            className=\"password-eye\"\n            onClick={() => {\n              setShowPassword(!showPassword);\n            }}\n          ></span>\n        </div>\n      </InputGroup>\n    </>\n  );\n};\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  type?: string;\n  name: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  refCallback?: any;\n  children?: any;\n  rows?: string;\n}\n\nconst FormInput = ({\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  refCallback,\n  children,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"password\" ? (\n            <>\n              <Form.Group className={containerClass}>\n                {label ? (\n                  <>\n                    {\" \"}\n                    <Form.Label className={labelClassName}>\n                      {label}\n                    </Form.Label>{\" \"}\n                    {children}{\" \"}\n                  </>\n                ) : null}\n                <PasswordInput\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors!}\n                  register={register}\n                  className={className}\n                />\n\n                {errors && errors[name] ? (\n                  <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name][\"message\"]}\n                  </Form.Control.Feedback>\n                ) : null}\n              </Form.Group>\n            </>\n          ) : (\n            <>\n              {type === \"checkbox\" || type === \"radio\" ? (\n                <>\n                  <Form.Group className={containerClass}>\n                    <Form.Check\n                      type={type}\n                      label={label}\n                      name={name}\n                      id={name}\n                      ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                      }}\n                      className={className}\n                      isInvalid={errors && errors[name] ? true : false}\n                      {...(register ? register(name) : {})}\n                      {...otherProps}\n                    />\n\n                    {errors && errors[name] ? (\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors[name][\"message\"]}\n                      </Form.Control.Feedback>\n                    ) : null}\n                  </Form.Group>\n                </>\n              ) : (\n                <Form.Group className={containerClass}>\n                  {label ? (\n                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                  ) : null}\n\n                  <Form.Control\n                    type={type}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as={comp}\n                    ref={(r: HTMLInputElement) => {\n                      if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    rows={rows}\n                    {...otherProps}\n                    autoComplete={name}\n                  >\n                    {children ? children : null}\n                  </Form.Control>\n\n                  {errors && errors[name] ? (\n                    <Form.Control.Feedback type=\"invalid\">\n                      {errors[name][\"message\"]}\n                    </Form.Control.Feedback>\n                  ) : null}\n                </Form.Group>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","import React, { useEffect } from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport LogoDark from \"../../assets/images/logo-dark.png\";\nimport LogoLight from \"../../assets/images/logo-light.png\";\n\ninterface AccountLayoutProps {\n  helpText?: string;\n  bottomLinks?: any;\n  isCombineForm?: boolean;\n  children?: any;\n}\n\nconst AuthLayout = ({\n  helpText,\n  bottomLinks,\n  children,\n  isCombineForm,\n}: AccountLayoutProps) => {\n  useEffect(() => {\n    if (document.body)\n      document.body.classList.add(\n        \"authentication-bg\",\n        \"authentication-bg-pattern\"\n      );\n\n    return () => {\n      if (document.body)\n        document.body.classList.remove(\n          \"authentication-bg\",\n          \"authentication-bg-pattern\"\n        );\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"account-pages mt-5 mb-5\">\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col md={8} lg={6} xl={isCombineForm ? 9 : 4}>\n              <Card className=\"bg-pattern\">\n                <Card.Body className=\"p-4\">\n                  <div className=\"text-center w-75 m-auto\">\n                    <div className=\"auth-brand\">\n                      <Link to=\"/\" className=\"logo logo-dark text-center\">\n                        <span className=\"logo-lg\">\n                          <img src={LogoDark} alt=\"\" height=\"22\" />\n                        </span>\n                      </Link>\n\n                      <Link to=\"/\" className=\"logo logo-light text-center\">\n                        <span className=\"logo-lg\">\n                          <img src={LogoLight} alt=\"\" height=\"22\" />\n                        </span>\n                      </Link>\n                    </div>\n                    <p className=\"text-muted mb-4 mt-3\">{helpText}</p>\n                  </div>\n                  {children}\n                </Card.Body>\n              </Card>\n\n              {/* bottom links */}\n              {bottomLinks}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n      <footer className=\"footer footer-alt\">\n        2015 - {new Date().getFullYear()} &copy; UBold theme by{\" \"}\n        <Link to=\"#\" className=\"text-white-50\">\n          Coderthemes\n        </Link>\n      </footer>\n    </>\n  );\n};\n\nexport default AuthLayout;\n","import React, { useEffect } from \"react\";\nimport { Button, Alert, Row, Col } from \"react-bootstrap\";\nimport { Navigate, Link, useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useTranslation } from \"react-i18next\";\nimport classNames from \"classnames\";\n\n// actions\nimport { resetAuth, loginUser } from \"../../redux/actions\";\n\n// store\nimport { RootState, AppDispatch } from \"../../redux/store\";\n\n// components\nimport { VerticalForm, FormInput } from \"../../components/\";\n\nimport AuthLayout from \"./AuthLayout\";\n\ninterface UserData {\n  email: string;\n  password: string;\n}\n\n/* bottom links */\nconst BottomLink = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Row className=\"mt-3\">\n      <Col className=\"text-center\">\n        <p>\n          <Link to={\"/auth/forget-password\"} className=\"text-white-50 ms-1\">\n            {t(\"Forgot your password?\")}\n          </Link>\n        </p>\n        <p className=\"text-white-50\">\n          {t(\"Don't have an account?\")}{\" \"}\n          <Link to={\"/auth/register\"} className=\"text-white ms-1\">\n            <b>{t(\"Sign Up\")}</b>\n          </Link>\n        </p>\n      </Col>\n    </Row>\n  );\n};\n\n/* social links */\nconst SocialLinks = () => {\n  const socialLinks = [\n    {\n      variant: \"primary\",\n      icon: \"facebook\",\n    },\n    {\n      variant: \"danger\",\n      icon: \"google\",\n    },\n    {\n      variant: \"info\",\n      icon: \"twitter\",\n    },\n    {\n      variant: \"secondary\",\n      icon: \"github\",\n    },\n  ];\n  return (\n    <>\n      <ul className=\"social-list list-inline mt-3 mb-0\">\n        {(socialLinks || []).map((item, index: number) => {\n          return (\n            <li key={index} className=\"list-inline-item\">\n              <Link\n                to=\"#\"\n                className={classNames(\n                  \"social-list-item\",\n                  \"border-\" + item.variant,\n                  \"text-\" + item.variant\n                )}\n              >\n                <i className={classNames(\"mdi\", \"mdi-\" + item.icon)}></i>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nconst Login = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const { user, userLoggedIn, loading, error } = useSelector(\n    (state: RootState) => ({\n      user: state.Auth.user,\n      loading: state.Auth.loading,\n      error: state.Auth.error,\n      userLoggedIn: state.Auth.userLoggedIn,\n    })\n  );\n\n  useEffect(() => {\n    dispatch(resetAuth());\n  }, [dispatch]);\n\n  /*\n  form validation schema\n  */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      email: yup.string().email().required(t(\"Please enter Email\")),\n      password: yup.string().required(t(\"Please enter Password\")),\n    })\n  );\n\n  /*\n  handle form submission\n  */\n  const onSubmit = (formData: UserData) => {\n    dispatch(loginUser(formData[\"email\"], formData[\"password\"]));\n  };\n\n  const location = useLocation();\n  //\n  // const redirectUrl = location.state && location.state.from ? location.state.from.pathname : '/';\n  const redirectUrl = location?.search?.slice(6) || \"/\";\n\n  return (\n    <>\n      {(userLoggedIn || user) && <Navigate to={redirectUrl}></Navigate>}\n\n      <AuthLayout\n        helpText={t(\n          \"Enter your email address and password to access admin panel.\"\n        )}\n        bottomLinks={<BottomLink />}\n      >\n        {error && (\n          <Alert variant=\"danger\" className=\"my-2\">\n            {error}\n          </Alert>\n        )}\n\n        <VerticalForm<UserData>\n          onSubmit={onSubmit}\n          resolver={schemaResolver}\n          defaultValues={{ email: \"\", password: \"\" }}\n        >\n          <FormInput\n            label={t(\"Email\")}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your Email\"\n            containerClass={\"mb-3\"}\n          />\n          <FormInput\n            label={t(\"Password\")}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Enter your password\"\n            containerClass={\"mb-3\"}\n          ></FormInput>\n\n          <div className=\"text-center d-grid\">\n            <Button variant=\"primary\" type=\"submit\" disabled={loading}>\n              {t(\"Log In\")}\n            </Button>\n          </div>\n        </VerticalForm>\n\n        <div className=\"text-center\">\n          <h5 className=\"mt-3 text-muted\">{t(\"Sign in with\")}</h5>\n          <SocialLinks />\n        </div>\n      </AuthLayout>\n    </>\n  );\n};\n\nexport default Login;\n"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","showPassword","setShowPassword","useState","_Fragment","_jsxs","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","rows","otherProps","comp","helpText","bottomLinks","isCombineForm","useEffect","document","body","classList","add","remove","Container","Row","Col","md","lg","xl","Card","Link","to","src","LogoDark","alt","height","LogoLight","Date","getFullYear","BottomLink","t","useTranslation","SocialLinks","variant","icon","item","index","Login","_location$search","dispatch","useDispatch","user","userLoggedIn","loading","error","useSelector","state","Auth","resetAuth","schemaResolver","yupResolver","yup","shape","email","required","password","location","useLocation","redirectUrl","search","slice","Navigate","AuthLayout","Alert","VerticalForm","formData","loginUser","FormInput","Button","disabled"],"sourceRoot":""}