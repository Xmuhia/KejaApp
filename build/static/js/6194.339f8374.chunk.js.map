{"version":3,"file":"static/js/6194.339f8374.chunk.js","mappings":"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","sources":["../node_modules/dom-helpers/esm/activeElement.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useWillUnmount.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useUpdatedRef.js","../node_modules/@restart/ui/esm/Modal.js","../node_modules/@restart/ui/esm/ModalManager.js","../node_modules/@restart/ui/esm/getScrollbarWidth.js","../node_modules/@restart/ui/esm/useWaitForDOMRef.js","../node_modules/dom-helpers/esm/hasClass.js","../node_modules/react-bootstrap/esm/AbstractModalHeader.js","../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-bootstrap/esm/BootstrapModalManager.js","../node_modules/dom-helpers/esm/addClass.js","../node_modules/react-bootstrap/esm/CloseButton.js","../node_modules/react-bootstrap/esm/Fade.js","../node_modules/react-bootstrap/esm/ModalContext.js"],"sourcesContent":["import ownerDocument from './ownerDocument';\n/**\n * Returns the actively focused element safely.\n *\n * @param doc the document to check\n */\n\nexport default function activeElement(doc) {\n  if (doc === void 0) {\n    doc = ownerDocument();\n  }\n\n  // Support: IE 9 only\n  // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\n  try {\n    var active = doc.activeElement; // IE11 returns a seemingly empty object in some cases when accessing\n    // document.activeElement from an <iframe>\n\n    if (!active || !active.nodeName) return null;\n    return active;\n  } catch (e) {\n    /* ie throws if no active element */\n    return doc.body;\n  }\n}","import useUpdatedRef from './useUpdatedRef';\nimport { useEffect } from 'react';\n/**\n * Attach a callback that fires when a component unmounts\n *\n * @param fn Handler to run when the component unmounts\n * @category effects\n */\n\nexport default function useWillUnmount(fn) {\n  var onUnmount = useUpdatedRef(fn);\n  useEffect(function () {\n    return function () {\n      return onUnmount.current();\n    };\n  }, []);\n}","import { useRef } from 'react';\n/**\n * Returns a ref that is immediately updated with the new value\n *\n * @param value The Ref value\n * @category refs\n */\n\nexport default function useUpdatedRef(value) {\n  var valueRef = useRef(value);\n  valueRef.current = value;\n  return valueRef;\n}","const _excluded = [\"show\", \"role\", \"className\", \"style\", \"children\", \"backdrop\", \"keyboard\", \"onBackdropClick\", \"onEscapeKeyDown\", \"transition\", \"backdropTransition\", \"autoFocus\", \"enforceFocus\", \"restoreFocus\", \"restoreFocusOptions\", \"renderDialog\", \"renderBackdrop\", \"manager\", \"container\", \"onShow\", \"onHide\", \"onExit\", \"onExited\", \"onExiting\", \"onEnter\", \"onEntering\", \"onEntered\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable @typescript-eslint/no-use-before-define, react/prop-types */\nimport activeElement from 'dom-helpers/activeElement';\nimport contains from 'dom-helpers/contains';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport listen from 'dom-helpers/listen';\nimport { useState, useRef, useCallback, useImperativeHandle, forwardRef, useEffect } from 'react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport useMounted from '@restart/hooks/useMounted';\nimport useWillUnmount from '@restart/hooks/useWillUnmount';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport ModalManager from './ModalManager';\nimport useWaitForDOMRef from './useWaitForDOMRef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nlet manager;\n\nfunction getManager() {\n  if (!manager) manager = new ModalManager();\n  return manager;\n}\n\nfunction useModalManager(provided) {\n  const modalManager = provided || getManager();\n  const modal = useRef({\n    dialog: null,\n    backdrop: null\n  });\n  return Object.assign(modal.current, {\n    add: () => modalManager.add(modal.current),\n    remove: () => modalManager.remove(modal.current),\n    isTopModal: () => modalManager.isTopModal(modal.current),\n    setDialogRef: useCallback(ref => {\n      modal.current.dialog = ref;\n    }, []),\n    setBackdropRef: useCallback(ref => {\n      modal.current.backdrop = ref;\n    }, [])\n  });\n}\n\nconst Modal = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    show = false,\n    role = 'dialog',\n    className,\n    style,\n    children,\n    backdrop = true,\n    keyboard = true,\n    onBackdropClick,\n    onEscapeKeyDown,\n    transition,\n    backdropTransition,\n    autoFocus = true,\n    enforceFocus = true,\n    restoreFocus = true,\n    restoreFocusOptions,\n    renderDialog,\n    renderBackdrop = props => /*#__PURE__*/_jsx(\"div\", Object.assign({}, props)),\n    manager: providedManager,\n    container: containerRef,\n    onShow,\n    onHide = () => {},\n    onExit,\n    onExited,\n    onExiting,\n    onEnter,\n    onEntering,\n    onEntered\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const container = useWaitForDOMRef(containerRef);\n  const modal = useModalManager(providedManager);\n  const isMounted = useMounted();\n  const prevShow = usePrevious(show);\n  const [exited, setExited] = useState(!show);\n  const lastFocusRef = useRef(null);\n  useImperativeHandle(ref, () => modal, [modal]);\n\n  if (canUseDOM && !prevShow && show) {\n    lastFocusRef.current = activeElement();\n  }\n\n  if (!transition && !show && !exited) {\n    setExited(true);\n  } else if (show && exited) {\n    setExited(false);\n  }\n\n  const handleShow = useEventCallback(() => {\n    modal.add();\n    removeKeydownListenerRef.current = listen(document, 'keydown', handleDocumentKeyDown);\n    removeFocusListenerRef.current = listen(document, 'focus', // the timeout is necessary b/c this will run before the new modal is mounted\n    // and so steals focus from it\n    () => setTimeout(handleEnforceFocus), true);\n\n    if (onShow) {\n      onShow();\n    } // autofocus after onShow to not trigger a focus event for previous\n    // modals before this one is shown.\n\n\n    if (autoFocus) {\n      const currentActiveElement = activeElement(document);\n\n      if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {\n        lastFocusRef.current = currentActiveElement;\n        modal.dialog.focus();\n      }\n    }\n  });\n  const handleHide = useEventCallback(() => {\n    modal.remove();\n    removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();\n    removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();\n\n    if (restoreFocus) {\n      var _lastFocusRef$current;\n\n      // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)\n      (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);\n      lastFocusRef.current = null;\n    }\n  }); // TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120\n  // Show logic when:\n  //  - show is `true` _and_ `container` has resolved\n\n  useEffect(() => {\n    if (!show || !container) return;\n    handleShow();\n  }, [show, container,\n  /* should never change: */\n  handleShow]); // Hide cleanup logic when:\n  //  - `exited` switches to true\n  //  - component unmounts;\n\n  useEffect(() => {\n    if (!exited) return;\n    handleHide();\n  }, [exited, handleHide]);\n  useWillUnmount(() => {\n    handleHide();\n  }); // --------------------------------\n\n  const handleEnforceFocus = useEventCallback(() => {\n    if (!enforceFocus || !isMounted() || !modal.isTopModal()) {\n      return;\n    }\n\n    const currentActiveElement = activeElement();\n\n    if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {\n      modal.dialog.focus();\n    }\n  });\n  const handleBackdropClick = useEventCallback(e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    onBackdropClick == null ? void 0 : onBackdropClick(e);\n\n    if (backdrop === true) {\n      onHide();\n    }\n  });\n  const handleDocumentKeyDown = useEventCallback(e => {\n    if (keyboard && e.keyCode === 27 && modal.isTopModal()) {\n      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);\n\n      if (!e.defaultPrevented) {\n        onHide();\n      }\n    }\n  });\n  const removeFocusListenerRef = useRef();\n  const removeKeydownListenerRef = useRef();\n\n  const handleHidden = (...args) => {\n    setExited(true);\n    onExited == null ? void 0 : onExited(...args);\n  };\n\n  const Transition = transition;\n\n  if (!container || !(show || Transition && !exited)) {\n    return null;\n  }\n\n  const dialogProps = Object.assign({\n    role,\n    ref: modal.setDialogRef,\n    // apparently only works on the dialog role element\n    'aria-modal': role === 'dialog' ? true : undefined\n  }, rest, {\n    style,\n    className,\n    tabIndex: -1\n  });\n  let dialog = renderDialog ? renderDialog(dialogProps) : /*#__PURE__*/_jsx(\"div\", Object.assign({}, dialogProps, {\n    children: /*#__PURE__*/React.cloneElement(children, {\n      role: 'document'\n    })\n  }));\n\n  if (Transition) {\n    dialog = /*#__PURE__*/_jsx(Transition, {\n      appear: true,\n      unmountOnExit: true,\n      in: !!show,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: handleHidden,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      children: dialog\n    });\n  }\n\n  let backdropElement = null;\n\n  if (backdrop) {\n    const BackdropTransition = backdropTransition;\n    backdropElement = renderBackdrop({\n      ref: modal.setBackdropRef,\n      onClick: handleBackdropClick\n    });\n\n    if (BackdropTransition) {\n      backdropElement = /*#__PURE__*/_jsx(BackdropTransition, {\n        appear: true,\n        in: !!show,\n        children: backdropElement\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxs(_Fragment, {\n      children: [backdropElement, dialog]\n    }), container)\n  });\n});\nModal.displayName = 'Modal';\nexport default Object.assign(Modal, {\n  Manager: ModalManager\n});","import css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\n\nclass ModalManager {\n  constructor({\n    handleContainerOverflow = true,\n    isRTL = false\n  } = {}) {\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n  }\n\n  getScrollbarWidth() {\n    return getBodyScrollbarWidth();\n  }\n\n  getElement() {\n    return document.body;\n  }\n\n  setModalAttributes(_modal) {// For overriding\n  }\n\n  removeModalAttributes(_modal) {// For overriding\n  }\n\n  setContainerStyle(containerState) {\n    const style = {\n      overflow: 'hidden'\n    }; // we are only interested in the actual `style` here\n    // because we will override it\n\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const container = this.getElement();\n    containerState.style = {\n      overflow: container.style.overflow,\n      [paddingProp]: container.style[paddingProp]\n    };\n\n    if (containerState.scrollBarWidth) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\n    }\n\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n    css(container, style);\n  }\n\n  reset() {\n    [...this.modals].forEach(m => this.remove(m));\n  }\n\n  removeContainerStyle(containerState) {\n    const container = this.getElement();\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n    Object.assign(container.style, containerState.style);\n  }\n\n  add(modal) {\n    let modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n    this.setModalAttributes(modal);\n\n    if (modalIdx !== 0) {\n      return modalIdx;\n    }\n\n    this.state = {\n      scrollBarWidth: this.getScrollbarWidth(),\n      style: {}\n    };\n\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(this.state);\n    }\n\n    return modalIdx;\n  }\n\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return;\n    }\n\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n    // clean up the container\n\n    if (!this.modals.length && this.handleContainerOverflow) {\n      this.removeContainerStyle(this.state);\n    }\n\n    this.removeModalAttributes(modal);\n  }\n\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n\n}\n\nexport default ModalManager;","/**\n * Get the width of the vertical window scrollbar if it's visible\n */\nexport default function getBodyScrollbarWidth() {\n  return Math.abs(window.innerWidth - document.documentElement.clientWidth);\n}","import ownerDocument from 'dom-helpers/ownerDocument';\nimport { useState, useEffect } from 'react';\nexport const resolveContainerRef = ref => {\n  var _ref;\n\n  if (typeof document === 'undefined') return null;\n  if (ref == null) return ownerDocument().body;\n  if (typeof ref === 'function') ref = ref();\n  if (ref && 'current' in ref) ref = ref.current;\n  if ((_ref = ref) != null && _ref.nodeType) return ref || null;\n  return null;\n};\nexport default function useWaitForDOMRef(ref, onResolved) {\n  const [resolvedRef, setRef] = useState(() => resolveContainerRef(ref));\n\n  if (!resolvedRef) {\n    const earlyRef = resolveContainerRef(ref);\n    if (earlyRef) setRef(earlyRef);\n  }\n\n  useEffect(() => {\n    if (onResolved && resolvedRef) {\n      onResolved(resolvedRef);\n    }\n  }, [onResolved, resolvedRef]);\n  useEffect(() => {\n    const nextRef = resolveContainerRef(ref);\n\n    if (nextRef !== resolvedRef) {\n      setRef(nextRef);\n    }\n  }, [ref, resolvedRef]);\n  return resolvedRef;\n}","/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","import * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport CloseButton from './CloseButton';\nimport ModalContext from './ModalContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: false\n};\nconst AbstractModalHeader = /*#__PURE__*/React.forwardRef(({\n  closeLabel,\n  closeVariant,\n  closeButton,\n  onHide,\n  children,\n  ...props\n}, ref) => {\n  const context = useContext(ModalContext);\n  const handleClick = useEventCallback(() => {\n    context == null ? void 0 : context.onHide();\n    onHide == null ? void 0 : onHide();\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    ref: ref,\n    ...props,\n    children: [children, closeButton && /*#__PURE__*/_jsx(CloseButton, {\n      \"aria-label\": closeLabel,\n      variant: closeVariant,\n      onClick: handleClick\n    })]\n  });\n});\nAbstractModalHeader.defaultProps = defaultProps;\nexport default AbstractModalHeader;","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import addClass from 'dom-helpers/addClass';\nimport css from 'dom-helpers/css';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport removeClass from 'dom-helpers/removeClass';\nimport ModalManager from '@restart/ui/ModalManager';\nconst Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler'\n};\n\nclass BootstrapModalManager extends ModalManager {\n  adjustAndStore(prop, element, adjust) {\n    const actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\n    // @ts-ignore\n\n    element.dataset[prop] = actual;\n    css(element, {\n      [prop]: `${parseFloat(css(element, prop)) + adjust}px`\n    });\n  }\n\n  restore(prop, element) {\n    const value = element.dataset[prop];\n\n    if (value !== undefined) {\n      delete element.dataset[prop];\n      css(element, {\n        [prop]: value\n      });\n    }\n  }\n\n  setContainerStyle(containerState) {\n    super.setContainerStyle(containerState);\n    const container = this.getElement();\n    addClass(container, 'modal-open');\n    if (!containerState.scrollBarWidth) return;\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));\n  }\n\n  removeContainerStyle(containerState) {\n    super.removeContainerStyle(containerState);\n    const container = this.getElement();\n    removeClass(container, 'modal-open');\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.restore(paddingProp, el));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.restore(marginProp, el));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore(marginProp, el));\n  }\n\n}\n\nlet sharedManager;\nexport function getSharedManager(options) {\n  if (!sharedManager) sharedManager = new BootstrapModalManager(options);\n  return sharedManager;\n}\nexport default BootstrapModalManager;","import hasClass from './hasClass';\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  'aria-label': PropTypes.string,\n  onClick: PropTypes.func,\n\n  /**\n   * Render different color variant for the button.\n   *\n   * Omitting this will render the default dark color.\n   */\n  variant: PropTypes.oneOf(['white'])\n};\nconst defaultProps = {\n  'aria-label': 'Close'\n};\nconst CloseButton = /*#__PURE__*/React.forwardRef(({\n  className,\n  variant,\n  ...props\n}, ref) => /*#__PURE__*/_jsx(\"button\", {\n  ref: ref,\n  type: \"button\",\n  className: classNames('btn-close', variant && `btn-close-${variant}`, className),\n  ...props\n}));\nCloseButton.displayName = 'CloseButton';\nCloseButton.propTypes = propTypes;\nCloseButton.defaultProps = defaultProps;\nexport default CloseButton;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { ENTERED, ENTERING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nimport TransitionWrapper from './TransitionWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  in: false,\n  timeout: 300,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false\n};\nconst fadeStyles = {\n  [ENTERING]: 'show',\n  [ENTERED]: 'show'\n};\nconst Fade = /*#__PURE__*/React.forwardRef(({\n  className,\n  children,\n  transitionClasses = {},\n  ...props\n}, ref) => {\n  const handleEnter = useCallback((node, isAppearing) => {\n    triggerBrowserReflow(node);\n    props.onEnter == null ? void 0 : props.onEnter(node, isAppearing);\n  }, [props]);\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    onEnter: handleEnter,\n    childRef: children.ref,\n    children: (status, innerProps) => /*#__PURE__*/React.cloneElement(children, { ...innerProps,\n      className: classNames('fade', className, children.props.className, fadeStyles[status], transitionClasses[status])\n    })\n  });\n});\nFade.defaultProps = defaultProps;\nFade.displayName = 'Fade';\nexport default Fade;","import * as React from 'react';\nconst ModalContext = /*#__PURE__*/React.createContext({\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onHide() {}\n\n});\nexport default ModalContext;"],"names":["activeElement","doc","ownerDocument","active","nodeName","e","body","useWillUnmount","fn","onUnmount","value","valueRef","useRef","current","useUpdatedRef","useEffect","_excluded","manager","useModalManager","provided","modalManager","ModalManager","modal","dialog","backdrop","Object","assign","add","remove","isTopModal","setDialogRef","useCallback","ref","setBackdropRef","Modal","forwardRef","_ref","show","role","className","style","children","keyboard","onBackdropClick","onEscapeKeyDown","transition","backdropTransition","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","renderDialog","renderBackdrop","props","_jsx","providedManager","container","containerRef","onShow","onHide","onExit","onExited","onExiting","onEnter","onEntering","onEntered","rest","source","excluded","key","i","target","sourceKeys","keys","length","indexOf","_objectWithoutPropertiesLoose","useWaitForDOMRef","isMounted","useMounted","prevShow","usePrevious","exited","setExited","useState","lastFocusRef","useImperativeHandle","canUseDOM","handleShow","useEventCallback","removeKeydownListenerRef","listen","document","handleDocumentKeyDown","removeFocusListenerRef","setTimeout","handleEnforceFocus","currentActiveElement","contains","focus","handleHide","_lastFocusRef$current","handleBackdropClick","currentTarget","keyCode","defaultPrevented","handleHidden","arguments","Transition","dialogProps","undefined","tabIndex","React","appear","unmountOnExit","in","backdropElement","BackdropTransition","onClick","_Fragment","ReactDOM","_jsxs","displayName","Manager","OPEN_DATA_ATTRIBUTE","dataAttr","constructor","handleContainerOverflow","isRTL","this","modals","getScrollbarWidth","Math","abs","window","innerWidth","documentElement","clientWidth","getElement","setModalAttributes","_modal","removeModalAttributes","setContainerStyle","containerState","overflow","paddingProp","scrollBarWidth","parseInt","css","setAttribute","reset","forEach","m","removeContainerStyle","removeAttribute","modalIdx","push","state","splice","resolveContainerRef","nodeType","onResolved","resolvedRef","setRef","earlyRef","nextRef","hasClass","element","classList","baseVal","AbstractModalHeader","closeLabel","closeVariant","closeButton","context","useContext","ModalContext","handleClick","CloseButton","variant","defaultProps","replaceClassName","origClass","classToRemove","replace","RegExp","Selector","BootstrapModalManager","adjustAndStore","prop","adjust","actual","dataset","parseFloat","restore","super","marginProp","qsa","el","sharedManager","getSharedManager","options","propTypes","PropTypes","type","classNames","fadeStyles","ENTERING","ENTERED","Fade","transitionClasses","handleEnter","node","isAppearing","triggerBrowserReflow","TransitionWrapper","addEndListener","transitionEndListener","childRef","status","innerProps","timeout","mountOnEnter"],"sourceRoot":""}